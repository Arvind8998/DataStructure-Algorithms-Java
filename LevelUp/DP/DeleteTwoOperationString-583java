class Solution {
    public int getLongestCommonSubsequence(String str1, String str2, int N, int M, int[][] dp){
    for(int n=0; n<=N; n++){
        for(int m=0; m<=M; m++){
            if(n== 0 || m==0){
                dp[n][m] = 0;
                continue;
            }
            if(str1.charAt(n-1) == str2.charAt(m-1)){
                dp[n][m] = dp[n-1][m-1] +1;
            }
            else
                dp[n][m] = Math.max(dp[n][m-1], dp[n-1][m]);
        }
        }
        return dp[N][M];
    }

    
    public int getLongestCommonSubsequence(String str1, String str2){
        int n = str1.length(), m = str2.length();
        int[][] dp = new int[n+1][m+1];
        
        for(int[] d :dp){
            Arrays.fill(d, -1);
        }
        return getLongestCommonSubsequence(str1, str2, n, m, dp);
    }
    
    public int minDistance(String word1, String word2) {
        return word1.length() + word2.length() -                        2*getLongestCommonSubsequence(word1, word2);
    }
}